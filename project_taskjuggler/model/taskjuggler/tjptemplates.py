# -*- coding: utf-8 -*-
##############################################################################
#
#    Copyright (C) 2015 Eficent (<http://www.eficent.com/>)
#               Jordi Ballester Alomar <jordi.ballester@eficent.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################


class TjpTemplates(object):
    """Config abstraction
    Holds system wide configuration variables.
    """

    default_config_values = dict(

        tjp_tjinterval2_template="""{{ interval.date_start }} - {{
        interval.date_end
        }}""",

        tjp_tjproject_template="""
project {{ project.id }} "{{ project.name }}" {{ project.interval2 }} {
}
""",
        tjp_tjtask_template="""
        task {{task.id}} "{{task.name}}" {
            {% if task.effort %}
            effort {{task.effort}}
            {% endif %}
            {% if task.allocations %}
            allocate {{task.allocations}}
            {% endif %}
            {% if task.depends %}
            depends {{task.depends}}
            {% endif %}
            {% if task.childs %}
            {% for childtask in task.childs %}
                {{childtask}}
            {% endfor %}
            {% endif %}
        }""",

        tjp_tjresource_template='''resource {{resource.id}} "{{
        resource.name}}" {
        {%- for workinghours  in resource.workinghours %}
            {{workinghours}}
        {% endfor %}
        }''',

        tjp_tjworkinghours_template="""
        workinghours {{weekdayintervals}}
        {%if off %}
        off
        {%endif %}
        {{timeintervals}}
        """,

        tjp_depend_template="""!{{depend.task.absolute_id}}
        { {%if depend.gapduration %}{{depend.gapduration}}{%endif %}
        {%if depend.gaplength %}{{depend.gaplength}}{%endif %}
        {%if depend.onend %}onend{%endif %}
        {%if depend.onstart %}onstart{%endif %} }
        """,

        tjp_main_template="""
        # project
        {{project}}
        # resources
        {%- for resource in resources %}
        {{resource}}
        {%- endfor %}
        # tasks
        {% for task in tasks %}
            {{task}}
        {% endfor %}
        # report
        taskreport breakdown "{{csv_file_full_path}}"{
            formats csv
            timeformat "%Y-%m-%d-%H:%M"
            columns id, start, end
        }
        """,



        tjp_vacation_template='''vacation
        {{ vacation.start.strftime(
        '%Y-%m-%d-%H:%M:%S') }} -
        {{ vacation.end.strftime('%Y-%m-%d-%H:%M:%S') }}''',


        tjp_main_template2="""# Generated By Stalker v{{stalker.__version__}}
        {{studio.to_tjp}}
        # resources
        resource resources "Resources" {
        {%- for vacation in studio.vacations %}
            {{vacation.to_tjp}}
        {%- endfor %}
        {%- for user in studio.users %}
            {{user.to_tjp}}
        {%- endfor %}
        }
# tasks
{{ tasks_buffer }}
# reports
taskreport breakdown "{{csv_file_full_path}}"{
    formats csv
    timeformat "%Y-%m-%d-%H:%M"
    columns id, start, end {%- if compute_resources %}, resources{% endif %}
}""",

        tj_command='/usr/local/bin/tj3',

    )

    def __init__(self):
        self.config_values = TjpTemplates.default_config_values.copy()

    def __getattr__(self, name):
        return self.config_values[name]

    def __getitem__(self, name):
        return getattr(self, name)

    def __setitem__(self, name, value):
        return setattr(self, name, value)

    def __delitem__(self, name):
        delattr(self, name)

    def __contains__(self, name):
        return name in self.config_values


# use this instance
tjptemplates = TjpTemplates()